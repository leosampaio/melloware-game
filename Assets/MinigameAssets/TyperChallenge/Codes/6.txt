void async_synchronize_cookie_domain(async_cookie_t cookie, struct async_domain *domain)
{
    ktime_t uninitialized_var(starttime), delta, endtime;

    if (initcall_debug && system_state == SYSTEM_BOOTING) {
        pr_debug("async_waiting @ %i\n", task_pid_nr(current));
        starttime = ktime_get();
    }

    wait_event(async_done, lowest_in_progress(domain) >= cookie);

    if (initcall_debug && system_state == SYSTEM_BOOTING) {
        endtime = ktime_get();
        delta = ktime_sub(endtime, starttime);

        pr_debug("async_continuing @ %i after %lli usec\n",
            task_pid_nr(current),
            (long long)ktime_to_ns(delta) >> 10);
    }
}
EXPORT_SYMBOL_GPL(async_synchronize_cookie_domain);

/**
 * async_synchronize_cookie - synchronize asynchronous function calls with cookie checkpointing
 * @cookie: async_cookie_t to use as checkpoint
 */
void async_synchronize_cookie(async_cookie_t cookie)
{
    async_synchronize_cookie_domain(cookie, &async_dfl_domain);
}